language: cpp

cache:
  ccache: true
  directories:
    - $HOME/.conan
    - $HOME/.cache/pip
    - $HOME/Library/Caches/pip
    - $HOME/AppData/Local/pip/Cache

stages:
  - test
  - check

matrix:
  exclude:
    - os: windows
      compiler: cl
      install:
        - choco install python
        - export PATH="/c/Python37:$PATH"
        - export PATH="$HOME/AppData/Roaming/Python/Python37/Scripts:$PATH"
        - python -m pip install --user -U -r requirements.txt conan
        - conan config set general.user_home_short=None
      env:
        - MATRIX_EVAL="CC=cl && CXX=cl && CMAKE_GENERATOR='Visual Studio 15 2017'"
        - CONAN_PROFILE="$PWD/conan/x86-windows-msvc"

  include:
    - os: osx
      compiler: clang
      osx_image: xcode10.2
      addons:
        homebrew:
          packages:
            - ccache
      install:
        - ccache -M 500M
        - export PATH="/usr/local/opt/ccache/libexec:$PATH"
        - export PATH="$HOME/Library/Python/2.7/bin:$PATH"
        - python -m pip install --user -U -r requirements.txt conan
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++ && CMAKE_GENERATOR='Xcode'"
        - CONAN_PROFILE="$PWD/conan/any-macos-clang"

    - &linux_gcc
      os: linux
      compiler: gcc
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - valgrind
      install:
        - sudo update-alternatives
          --install /usr/bin/gcov gcov /usr/bin/gcov-8 80
        - python -m pip install --user -U -r requirements.txt conan
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8 && CMAKE_GENERATOR='Unix Makefiles'"
        - CONAN_PROFILE="$PWD/conan/any-linux-gcc"

    - &linux_clang
      os: linux
      compiler: clang
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libstdc++-8-dev
      install:
        - sudo update-alternatives
          --install /usr/bin/clang clang /usr/local/clang-7.0.0/bin/clang 70
          --slave /usr/bin/clang++ clang++ /usr/local/clang-7.0.0/bin/clang++
          --slave /usr/bin/ld ld /usr/local/clang-7.0.0/bin/lld
        - export LD_LIBRARY_PATH="/usr/local/clang-7.0.0/lib:$LD_LIBRARY_PATH"
        - sudo update-ccache-symlinks
        - python -m pip install --user -U -r requirements.txt conan
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++ && CMAKE_GENERATOR='Ninja'"
        - CONAN_PROFILE="$PWD/conan/any-linux-clang"

    - stage: check
      <<: *linux_clang
      script:
        - mkdir build && cd build &&
          conan install .. -u
          -if .
          -b missing
          -s build_type=Debug
          -pr $CONAN_PROFILE &&
          cmake ..
          -B.
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake
          -DBUILD_EXAMPLES=ON
          -Ddebug_dynamic_deps=ON
          -Dprojname_check=clang-tidy &&
          cmake --build . --config Debug

    - stage: check
      <<: *linux_gcc
      script:
        - mkdir build && cd build &&
          conan install .. -u
          -if .
          -b missing
          -s build_type=Debug
          -pr $CONAN_PROFILE &&
          cmake ..
          -B.
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake
          -DBUILD_EXAMPLES=ON
          -Ddebug_dynamic_deps=ON
          -Dprojname_coverage=xml &&
          cmake --build . --config Debug &&
          source activate_run.sh &&
          ctest -V -C Debug -D ExperimentalTest &&
          ctest -V -C Debug -D ExperimentalCoverage &&
          ( source deactivate_run.sh || true )
      after_success:
        - bash <(curl -s https://codecov.io/bash)

    - stage: check
      <<: *linux_clang
      script:
        - mkdir build && cd build &&
          conan install .. -u
          -if .
          -b missing
          -s build_type=Debug
          -pr $CONAN_PROFILE &&
          cmake ..
          -B.
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake
          -DBUILD_EXAMPLES=ON
          -Ddebug_dynamic_deps=ON
          -Dprojname_sanitizer=address &&
          cmake --build . --config Debug &&
          source activate_run.sh &&
          ctest -V -C Debug -D ExperimentalTest &&
          ( source deactivate_run.sh || true )

    - stage: check
      <<: *linux_gcc
      script:
        - mkdir build && cd build &&
          conan install .. -u
          -if .
          -b missing
          -s build_type=Debug
          -pr $CONAN_PROFILE &&
          cmake ..
          -B.
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake
          -DBUILD_EXAMPLES=ON
          -Ddebug_dynamic_deps=ON
          -Dprojname_valgrind=memcheck &&
          cmake --build . --config Debug &&
          source activate_run.sh &&
          ctest -V -C Debug -D ExperimentalMemCheck &&
          ( source deactivate_run.sh || true )

before_install:
  - eval "$MATRIX_EVAL"

before_script:
  - conan config set general.non_interactive=True
  - conan user
  - BUILD_TYPE=Release
  - ccache -z || true

script:
  - mkdir build && cd build &&
    conan install .. -u
    -if .
    -b missing
    -s build_type=$BUILD_TYPE
    -pr $CONAN_PROFILE &&
    cmake ..
    -B.
    -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake
    -DBUILD_EXAMPLES=ON
    -Ddebug_dynamic_deps=ON &&
    cmake --build . --config $BUILD_TYPE &&
    source activate_run.sh &&
    ctest -V -C $BUILD_TYPE &&
    ( source deactivate_run.sh || true ) &&
    cmake --build . --config $BUILD_TYPE --target install

after_script:
  - ccache -s || true
