language: cpp

cache:
  ccache: true
  directories:
    - $HOME/.conan
    - $HOME/.cache/pip
    - $HOME/Library/Caches/pip
    - $HOME/AppData/Local/pip/Cache

stages:
  - test
  - check

matrix:
  fast_finish: true
  exclude:
    - stage: test
      name: windows-cl
      os: windows
      compiler: cl
      install:
        - choco install python --version 3.8.0
        - export PATH=/c/Python38:/c/Python38/Scripts:$PATH
        - export PATH=$HOME/AppData/Roaming/Python/Python38/Scripts:$PATH
        - python3 -m pip install --user -U -r requirements.txt conan
        - conan config set general.user_home_short=None
      env:
        - MATRIX_EVAL="CC=cl && CXX=cl"
        - CMAKE_GENERATOR='Visual Studio 15 2017'

  include:
    - stage: test
      name: osx-clang
      os: osx
      compiler: clang
      osx_image: xcode10.3
      addons:
        homebrew:
          packages:
            - ccache
      install:
        - ccache -M 500M
        - export PATH=/usr/local/opt/ccache/libexec:$PATH
        - export PATH=$HOME/Library/Python/3.7/bin:$PATH
        - python3 -m pip install --user -U -r requirements.txt conan
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - CMAKE_GENERATOR='Xcode'

    - &linux_gcc
      stage: test
      name: linux-gcc
      os: linux
      compiler: gcc
      dist: bionic
      addons:
        apt:
          packages:
            - g++-8
            - valgrind
      install:
        - sudo update-alternatives
            --install /usr/bin/gcov gcov /usr/bin/gcov-8 80
        - python -m pip install --user -U -r requirements.txt conan
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
        - CMAKE_GENERATOR='Unix Makefiles'

    - &linux_clang
      stage: test
      name: linux-clang
      os: linux
      compiler: clang
      dist: bionic
      addons:
        apt:
          packages:
            - libstdc++-8-dev
      install:
        - sudo update-alternatives
            --install /usr/bin/clang clang /usr/local/clang-7.0.0/bin/clang 70
            --slave /usr/bin/clang++ clang++ /usr/local/clang-7.0.0/bin/clang++
            --slave /usr/bin/ld ld /usr/local/clang-7.0.0/bin/lld
        - export LD_LIBRARY_PATH=/usr/local/clang-7.0.0/lib:$LD_LIBRARY_PATH
        - sudo update-ccache-symlinks
        - python -m pip install --user -U -r requirements.txt conan
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - CMAKE_GENERATOR='Ninja'

    - <<: *linux_clang
      stage: check
      name: linux-clang-tidy
      script:
        - scripts/run.sh
            Conan
            Debug
            Upgrade
            Verbose
            Test
            Examples
            Rpaths
            Check=clang-tidy

    - <<: *linux_gcc
      stage: check
      name: linux-gcc-coverage
      script:
        - scripts/run.sh
            Conan
            Debug
            Upgrade
            Verbose
            Test
            Examples
            Rpaths
            Coverage=xml
      after_success:
        - bash <(curl -s https://codecov.io/bash)

    - <<: *linux_clang
      stage: check
      name: linux-clang-asan
      script:
        - scripts/run.sh
            Conan
            Debug
            Upgrade
            Verbose
            Test
            Examples
            Rpaths
            Sanitizer=address

    - <<: *linux_gcc
      stage: check
      name: linux-gcc-memcheck
      script:
        - scripts/run.sh
            Conan
            Debug
            Upgrade
            Verbose
            Test
            Examples
            Rpaths
            MemCheck=memcheck

before_install:
  - eval "$MATRIX_EVAL"

before_script:
  - conan config set general.non_interactive=True
  - conan user
  - if [[ $TRAVIS_OS_NAME == windows ]]; then ccache -z; fi
  - cmake -E environment
  - cmake -E capabilities

script:
  - scripts/run.sh
      Conan
      Release
      Upgrade
      Verbose
      Test
      Benchmark
      Examples
      Rpaths
      Install

after_script:
  - |-
    for f in dist/bin/* dist/lib/lib*; do
      if [[ ! -L $f ]]; then
        if [[ $TRAVIS_OS_NAME == linux ]]; then
          echo $f:; ldd $f
        elif [[ $TRAVIS_OS_NAME == osx ]]; then
          otool -L $f
        fi
      fi
    done
  - if [[ $TRAVIS_OS_NAME == windows ]]; then ccache -s; fi
