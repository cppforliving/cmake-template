language: cpp

cache:
  ccache: true
  directories:
    - $HOME/.conan
    - $HOME/.cache/pip
    - $HOME/Library/Caches/pip
    - $HOME/AppData/Local/pip/Cache

stages:
  - test
  - check

matrix:
  fast_finish: true
  exclude:
    - os: windows
      compiler: cl
      install:
        - choco install python --version 3.8.0
        - export PATH=/c/Python38:/c/Python38/Scripts:$PATH
        - export PATH=$HOME/AppData/Roaming/Python/Python38/Scripts:$PATH
        - python3 -m pip install --user -U -r requirements.txt conan
        - conan config set general.user_home_short=None
      env:
        - MATRIX_EVAL="CC=cl && CXX=cl"
        - CMAKE_GENERATOR='Visual Studio 15 2017'

  include:
    - os: osx
      compiler: clang
      osx_image: xcode10.3
      addons:
        homebrew:
          packages:
            - ccache
      install:
        - ccache -M 500M
        - export PATH=/usr/local/opt/ccache/libexec:$PATH
        - export PATH=$HOME/Library/Python/3.7/bin:$PATH
        - python3 -m pip install --user -U -r requirements.txt conan
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - CMAKE_GENERATOR='Xcode'

    - &linux_gcc
      os: linux
      compiler: gcc
      dist: bionic
      addons:
        apt:
          packages:
            - g++-8
            - python3-pip
            - python3-setuptools
            - python3-wheel
            - valgrind
      install:
        - sudo update-alternatives
          --install /usr/bin/gcov gcov /usr/bin/gcov-8 80
        - python3 -m pip install --user -U pip setuptools wheel
        - python3 -m pip install --user -U -r requirements.txt conan
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
        - CMAKE_GENERATOR='Unix Makefiles'

    - &linux_clang
      os: linux
      compiler: clang
      dist: bionic
      addons:
        apt:
          packages:
            - libstdc++-8-dev
            - python3-pip
            - python3-setuptools
            - python3-wheel
      install:
        - sudo update-alternatives
          --install /usr/bin/clang clang /usr/local/clang-7.0.0/bin/clang 70
          --slave /usr/bin/clang++ clang++ /usr/local/clang-7.0.0/bin/clang++
          --slave /usr/bin/ld ld /usr/local/clang-7.0.0/bin/lld
        - export LD_LIBRARY_PATH=/usr/local/clang-7.0.0/lib:$LD_LIBRARY_PATH
        - sudo update-ccache-symlinks
        - python3 -m pip install --user -U pip setuptools wheel
        - python3 -m pip install --user -U -r requirements.txt conan
      env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - CMAKE_GENERATOR='Ninja'

    - stage: check
      <<: *linux_clang
      script:
        - tools/setup.sh
          --package_manager=conan
          --build_type=Debug
          --build_dir=build
          --update &&
          cd build &&
          cmake ..
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake
          -DBUILD_EXAMPLES=ON
          -Ddebug_dynamic_deps=ON
          -Dprojname_check=clang-tidy &&
          cmake --build . --verbose --config Debug

    - stage: check
      <<: *linux_gcc
      script:
        - tools/setup.sh
          --package_manager=conan
          --build_type=Debug
          --build_dir=build
          --update &&
          cd build &&
          cmake ..
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake
          -DBUILD_EXAMPLES=ON
          -Ddebug_dynamic_deps=ON
          -Dprojname_coverage=xml &&
          cmake --build . --verbose --config Debug &&
          source activate_run.sh &&
          ctest -V -C Debug -D ExperimentalTest &&
          ctest -V -C Debug -D ExperimentalCoverage &&
          source deactivate_run.sh
      after_success:
        - bash <(curl -s https://codecov.io/bash)

    - stage: check
      <<: *linux_clang
      script:
        - tools/setup.sh
          --package_manager=conan
          --build_type=Debug
          --build_dir=build
          --update &&
          cd build &&
          cmake ..
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake
          -DBUILD_EXAMPLES=ON
          -Ddebug_dynamic_deps=ON
          -Dprojname_sanitizer=address &&
          cmake --build . --verbose --config Debug &&
          source activate_run.sh &&
          ctest -V -C Debug -D ExperimentalTest &&
          source deactivate_run.sh

    - stage: check
      <<: *linux_gcc
      script:
        - tools/setup.sh
          --package_manager=conan
          --build_type=Debug
          --build_dir=build
          --update &&
          cd build &&
          cmake ..
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake
          -DBUILD_EXAMPLES=ON
          -Ddebug_dynamic_deps=ON
          -Dprojname_valgrind=memcheck &&
          cmake --build . --verbose --config Debug &&
          source activate_run.sh &&
          ctest -V -C Debug -D ExperimentalMemCheck &&
          source deactivate_run.sh

before_install:
  - eval "$MATRIX_EVAL"

before_script:
  - conan config set general.non_interactive=True
  - conan user
  - BUILD_TYPE=Release
  - "[[ $TRAVIS_OS_NAME == windows ]] || ccache -z"
  - printenv

script:
  - tools/setup.sh
    --package_manager=conan
    --build_type=$BUILD_TYPE
    --build_dir=build
    --update &&
    cd build &&
    cmake ..
    -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake
    -DBUILD_EXAMPLES=ON
    -Ddebug_dynamic_deps=ON &&
    cmake --build . --verbose --config $BUILD_TYPE &&
    source activate_run.sh &&
    ctest -V -C $BUILD_TYPE &&
    source deactivate_run.sh &&
    cmake --build . --verbose --config $BUILD_TYPE --target install

after_script:
  - >
    for f in dist/bin/* dist/lib/lib*; do
      if [[ ! -L $f ]]; then
        if [[ $TRAVIS_OS_NAME == linux ]]; then
          echo $f:; ldd $f;
        elif [[ $TRAVIS_OS_NAME == osx ]]; then
          otool -L $f;
        fi;
      fi;
    done
  - "[[ $TRAVIS_OS_NAME == windows ]] || ccache -s"
