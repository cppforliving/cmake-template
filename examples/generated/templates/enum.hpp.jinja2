/** @file
 * generated from {{ input_file }}
 */

#ifndef {{ header_guard }}
#define {{ header_guard }}

#include <cassert>
#include <ostream>

{% for ns in enum_ns %}
namespace {{ ns }} {
{% endfor %}

enum class {{ enum_name }}{% if underlying %} : {{ underlying }}{% endif %} {
{% for item in enum_values %}
    {{ item }},
{% endfor %}
};

template <typename T>
std::basic_ostream<T>& operator<<(std::basic_ostream<T>& os, {{ enum_name }} const value)
{
    switch (value)
    {
{% for item in enum_values %}
    case {{ enum_name }}::{{ item }}:
        return os << "{{ item }}";
{% endfor %}
    }
    assert(false);
    return os << '?';
}

{% for ns in enum_ns %}
}  // namespace {{ ns }}
{% endfor %}

#endif  // {{ header_guard }}
