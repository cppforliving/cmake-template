#ifndef {{ header_guard }}
#define {{ header_guard }}

{% if enum_values %}
// #include <cassert>
{% endif %}
#include <ostream>
#include <type_traits>

{% for ns in enum_ns %}
namespace {{ ns }} {
{% endfor %}

enum class {{ enum_name }}{% if underlying %} : {{ underlying }}{% endif %} {
{% for item in enum_values %}
    {{ item }},
{% endfor %}
};

template <typename T>
std::basic_ostream<T>& operator<<(std::basic_ostream<T>& os, {{ enum_name }} const value)
{
    switch (value)
    {
{% for item in enum_values %}
    case {{ enum_name }}::{{ item }}:
        os << "{{ item }}";
        break;
{% endfor %}
    default:
{% if enum_values %}
        // assert(false);
{% endif %}
        os << +static_cast<std::underlying_type_t<{{ enum_name }}>>(value);
    }
    return os;
}

{% for ns in enum_ns %}
}  // namespace {{ ns }}
{% endfor %}

#endif  // {{ header_guard }}
